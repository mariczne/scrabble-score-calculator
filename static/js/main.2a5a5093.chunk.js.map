{"version":3,"sources":["scoretable.js","Letter.js","Word.js","components/Tile/Tile.js","components/Tile/BonusTile.js","App.js","serviceWorker.js","index.js"],"names":["SCORE_TABLE","PL","0","1","2","3","4","5","6","7","8","9","10","EN","Letter","index","character","languageCode","this","isScoreDoubled","isScoreTripled","score","Number","Object","keys","find","key","includes","toUpperCase","isInteger","Word","input","timesDoubled","timesTripled","multiplierTotal","isBingoUsed","letters","getLetters","Array","from","map","letter","length","bonusType","isNextWordBonusAllowed","isBingoAllowed","some","element","NaN","reduce","prev","curr","Tile","toggleLetterBonus","className","style","backgroundColor","color","onClick","defaultProps","BonusTile","times","toggleWordBonus","cursor","left","App","handleInputChange","e","setState","target","value","updateWord","handleLanguageChange","state","word","toggleBonus","toggleBingo","addBonus","renderTiles","renderScore","isNaN","onChange","type","placeholder","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a5a5093.chunk.js","sourcesContent":["export const SCORE_TABLE = {\n  PL: {\n    0: [\" \"],\n    1: [\"A\", \"I\", \"E\", \"O\", \"N\", \"Z\", \"R\", \"S\", \"W\"],\n    2: [\"Y\", \"C\", \"D\", \"K\", \"L\", \"M\", \"P\", \"T\"],\n    3: [\"B\", \"G\", \"H\", \"J\", \"Ł\", \"U\"],\n    4: [],\n    5: [\"Ą\", \"Ę\", \"F\", \"Ó\", \"Ś\", \"Ż\"],\n    6: [\"Ć\"],\n    7: [\"Ń\"],\n    8: [],\n    9: [\"Ź\"],\n    10: []\n  },\n  EN: {\n    0: [\" \"],\n    1: [\"E\", \"A\", \"I\", \"O\", \"N\", \"R\", \"T\", \"L\", \"S\", \"U\"],\n    2: [\"D\", \"G\"],\n    3: [\"B\", \"C\", \"M\", \"P\"],\n    4: [\"F\", \"H\", \"V\", \"W\", \"Y\"],\n    5: [\"K\"],\n    6: [],\n    7: [],\n    8: [\"J\", \"X\"],\n    9: [],\n    10: [\"Q\", \"Z\"]\n  }\n};\n","import { SCORE_TABLE } from \"./scoretable\";\n\nexport default class Letter {\n  constructor(index, character, languageCode) {\n    this.index = index;\n    this.character = character;\n    this.languageCode = languageCode;\n    this.isScoreDoubled = false;\n    this.isScoreTripled = false;\n  }\n\n  get score() {\n    let score = Number(\n      Object.keys(SCORE_TABLE[this.languageCode]).find(key =>\n        SCORE_TABLE[this.languageCode][key].includes(this.character.toUpperCase())\n      )\n    );\n    if (this.isScoreDoubled) score *= 2;\n    if (this.isScoreTripled) score *= 3;\n    if (Number.isInteger(score)) return score;\n    return \"?\";\n  }\n\n  toggleBonus() {\n    if (!this.isScoreDoubled && !this.isScoreTripled) {\n      this.isScoreDoubled = true;\n    } else if (this.isScoreDoubled) {\n      this.isScoreDoubled = false;\n      this.isScoreTripled = true;\n    } else if (this.isScoreTripled) {\n      this.isScoreTripled = false;\n    }\n    return this.score;\n  }\n}\n","import Letter from \"./Letter\";\n\nexport default class Word {\n  constructor(input, languageCode) {\n    this.input = input;\n    this.languageCode = languageCode;\n    this.timesDoubled = 0;\n    this.timesTripled = 0;\n    this.multiplierTotal = 1;\n    this.isBingoUsed = false;\n    this.letters = this.getLetters();\n  }\n\n  getLetters() {\n    const letters = Array.from(this.input);\n\n    return letters.map((letter, index) => new Letter(index, letter, this.languageCode))\n  }\n\n  get score() {\n    if (this.letters.length === 0) return 0;\n    if (this.letters.some(element => !Number.isInteger(element.score)))\n      return NaN;\n    return (\n      this.letters\n        .map(element => element.score)\n        .reduce((prev, curr) => (prev += curr))\n        * this.multiplierTotal\n        + (this.isBingoUsed ? 50 : 0)\n    );\n  }\n\n  isNextWordBonusAllowed() {\n    // there cannot ever be more word bonuses than total number of letters\n    // in practice the limit is even lower\n    return this.letters.length > this.timesDoubled + this.timesTripled;\n  }\n\n  addBonus(bonusType) {\n    if (bonusType === \"double\" && this.isNextWordBonusAllowed()) {\n      this.timesDoubled++;\n      this.multiplierTotal *= 2;\n    }\n    if (bonusType === \"triple\" && this.isNextWordBonusAllowed()) {\n      this.timesTripled++;\n      this.multiplierTotal *= 3;\n    }\n  }\n\n  isBingoAllowed() {\n    return this.letters.length > 6;\n  }\n\n  toggleBingo() {\n    if (this.isBingoAllowed()) {\n      this.isBingoUsed = !this.isBingoUsed;\n    }\n  }\n}\n","import React from \"react\";\nimport \"./Tile.css\";\n\nfunction Tile({\n  index,\n  character,\n  score,\n  isScoreDoubled,\n  isScoreTripled,\n  toggleLetterBonus\n}) {\n  return (\n    <div\n      className=\"tile\"\n      style={\n        score === \"?\"\n          ? { backgroundColor: \"lightgray\" }\n          : isScoreDoubled\n          ? { backgroundColor: \"#6cf\" }\n          : isScoreTripled\n          ? { backgroundColor: \"#06f\", color: \"white\" }\n          : {}\n      }\n      onClick={() => toggleLetterBonus(index)}\n    >\n      <span className=\"tile-letter\">{character.toUpperCase()}</span>\n      <span className=\"tile-score\">{character !== \" \" ? score : null}</span>\n    </div>\n  );\n}\n\nTile.defaultProps = {\n  score: \"?\"\n};\n\nexport default Tile;\n","import React from \"react\";\nimport \"./Tile.css\";\n\nfunction BonusTile({\n  bonusType,\n  times,\n  toggleWordBonus,\n  isBingoAllowed,\n  isBingoUsed\n}) {\n  return (\n    <div\n      className=\"tile\"\n      style={\n        bonusType === \"double\"\n          ? { backgroundColor: \"#f9f\" }\n          : bonusType === \"triple\"\n          ? { backgroundColor: \"#f00\" }\n          : bonusType === \"bingo\" && isBingoAllowed\n          ? { backgroundColor: \"orange\" }\n          : { backgroundColor: \"lightgray\", cursor: \"default\" }\n      }\n      onClick={() => toggleWordBonus(bonusType)}\n    >\n      <span className=\"tile-bonus-name\">\n        {bonusType === \"double\"\n          ? \"DOUBLE WORD SCORE\"\n          : bonusType === \"triple\"\n          ? \"TRIPLE WORD SCORE\"\n          : bonusType === \"bingo\"\n          ? \"BINGO\"\n          : null}\n      </span>\n      {bonusType === \"bingo\" ? (\n        isBingoUsed ? (\n          <span className=\"tile-bonus-score\" style={{ left: \"-0.75rem\" }}>\n            ACTIVE\n          </span>\n        ) : null\n      ) : times > 0 ? (\n        <span className=\"tile-bonus-score\">x{times}</span>\n      ) : null}\n    </div>\n  );\n}\n\nexport default BonusTile;\n","import React, { Component } from \"react\";\nimport Word from \"./Word\";\nimport Tile from \"./components/Tile/Tile\";\nimport BonusTile from \"./components/Tile/BonusTile\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      languageCode: \"PL\",\n      word: new Word(\"\", \"PL\")\n    };\n  }\n\n  handleInputChange = e => {\n    this.setState({ input: e.target.value }, () => this.updateWord());\n  };\n\n  handleLanguageChange = e => {\n    this.setState({ languageCode: e.target.value }, () => this.updateWord());\n  };\n\n  updateWord = () => {\n    const { input, languageCode } = this.state;\n    this.setState({ word: new Word(input, languageCode) });\n  };\n\n  toggleLetterBonus = index => {\n    const { word } = this.state;\n    word.letters[index].toggleBonus();\n    this.setState({ word: word });\n  };\n\n  toggleWordBonus = bonusType => {\n    const { word } = this.state;\n    if (bonusType === \"bingo\") word.toggleBingo();\n    else word.addBonus(bonusType);\n    this.setState({ word: word });\n  };\n\n  renderTiles = () => {\n    const { word } = this.state;\n    if (word.letters.length === 0) return null;\n    return word.letters.map(letter => (\n      <Tile\n        index={letter.index}\n        character={letter.character}\n        score={letter.score}\n        isScoreDoubled={letter.isScoreDoubled}\n        isScoreTripled={letter.isScoreTripled}\n        toggleLetterBonus={this.toggleLetterBonus}\n      />\n    ));\n  };\n\n  renderScore = () => {\n    const { word } = this.state;\n\n    if (Number.isNaN(word.score)) return \"At least one invalid letter\";\n    return word.score;\n  };\n\n  render() {\n    const { input, word, languageCode } = this.state;\n\n    return (\n      <div className=\"App\">\n        Language:{\" \"}\n        <select\n          value={languageCode}\n          onChange={this.handleLanguageChange}\n          className=\"lang-select\"\n        >\n          <option value=\"PL\">Polish</option>\n          <option value=\"EN\">English</option>\n        </select>\n        <input\n          type=\"search\"\n          value={input}\n          onChange={this.handleInputChange}\n          className=\"word-input\"\n          placeholder=\"Type a word to start\"\n        />\n        <div>\n          <BonusTile\n            bonusType=\"double\"\n            times={word.timesDoubled}\n            toggleWordBonus={this.toggleWordBonus}\n          />\n          <BonusTile\n            bonusType=\"triple\"\n            times={word.timesTripled}\n            toggleWordBonus={this.toggleWordBonus}\n          />\n          <BonusTile\n            bonusType=\"bingo\"\n            toggleWordBonus={this.toggleWordBonus}\n            isBingoAllowed={word.isBingoAllowed()}\n            isBingoUsed={word.isBingoUsed}\n          />\n        </div>\n        <div>{this.renderTiles()}</div>\n        Score: {this.renderScore()}\n        <p>Click on a tile to toggle its letter bonus</p>\n        <p>All bonuses get reset when user input changes</p>\n        <p>A blank tile can be entered by using the spacebar</p>\n        <p>Bingo can be activated when there are at least 7 tiles used</p>\n        <p>\n          <a href=\"https://en.wikipedia.org/wiki/Scrabble#Scoring\">\n            Scrabble scoring rules\n          </a>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}